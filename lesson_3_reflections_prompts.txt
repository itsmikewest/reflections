*** When would you want to use a remote repository rather than keeping all your
work local? ***

You'd want to use a remote repository when you're looking to share your work or
there are multiple people who working on a file. Most companies use private
repositories (cloud storage) of their production code, branches, etc
-----------------------------------------------------------------------------------

*** Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository? ***

I think it's better to always pull changes manually because I wouldn't want to
have my remote repository always matching what I have in my working directory
or local repository. At this point it looks like you're really pushing more
production ready code to Github. At that you pull when you're looking to work
on things locally. If it's my project I'll typically have everything I need on
my local machine. I can pull from other projects what I need.
-----------------------------------------------------------------------------------
*** Describe the differences between forks, clones, and branches. When would
you use one instead of another? ***

A fork is a clone/direct copy of some repository to another repository that
occurs and stays on Github. Clones are direct copies of repositories that
either go from Github to local or local to another location locally. Branches
are "break offs" from the master code branch where you work on and test new
features, code etc that can either be discarded or merged back into the master
branch at some point. Branches happen on the local machine.
-----------------------------------------------------------------------------------
*** What is the benefit of having a copy of the last known state of the remote
stored locally? ***

This section was difficult for me as I didn't really understand the concepts
that were being presented. Overall I'd say the benefit of keeping the last
known state locally is the fact it allows for the ability to merge the remote
with whatever is on Github and be able to run git diff to see the differences
and any type of merge conflicts, etc.
-----------------------------------------------------------------------------------
*** How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder? ***

Without Git or Github I'd likely need a situation that was pretty ad-hoc;
mixing doc files or excel files tracking changes and some type of shared/cloud
based file service that saved different states of programs. I think this would
likely also require a numbering system/file-naming system to take into account
different file states, times, etc. Not an easy task by any means.
