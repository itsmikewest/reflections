*** What happens when you initialize a repository? Why do you need to do it? ***

When you initialize a repository Git creates a .git directory in whatever
location you're at. It then begins to track the changes that you make to the files
in this location, when you make commits. If you don't initiate there is no way for
.git to track changes or allow for commits. It will let you know what files in a
directory are not being tracked.
-----------------------------------------------------------------------------------

*** How is the staging area different from the working directory and the repository?
What value do you think it offers? ***

The working directory is the current location that files are stored in that you've
navigated to in bash...essentially the current location. The repository is the
actual "container" of sorts that stores the files that have a commit on them.
The staging area is the location that acts as the holding area before becoming a
repository and receiving commits. It allows for files to be separated from the
working directory and prepared for a repository. I don't understand what value this
holds though.
-----------------------------------------------------------------------------------

*** How can you use the staging area to make sure you have one commit per logical
change? ***

I would first start by running git status just so I know what's in the staging area.
Once I find out what it's the staging area I would run git diff --staging area to
find out what the differences were between files in the staging area and those that
are in the repository.
-----------------------------------------------------------------------------------

*** What are some situations when branches would be helpful in keeping your history
organized? How would branches help? ***

Some situations that branches would be helpful are when you are testing out new
new features or differences in a program. Language differences, new abilities etc
and you're not ready to commit those changes to the master code yet.
-----------------------------------------------------------------------------------

*** How do the diagrams help you visualize the branch structure? ***

They help you recognize if your commits are on an available branch or if they're
commits that will disappear once you change back (git checkout) to another branch.
They also show the flow of where the master branch is and changes that could have
possibly occurred to it when you've branched off etc.
-----------------------------------------------------------------------------------

*** What is the result of merging two branches together? Why do we represent it in
the diagram the way we do? ***

The result of merging two branches together is that you incorporate all of the
changes at the heads/tips of both branches and merge them together. The need head
uses the tips of both branches as parents and incorporates all of the commits from
the time that the branch deviated. They're placed in order by time stamp.
-----------------------------------------------------------------------------------

*** What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually? ***

I'm not sure I quite understand what this question is asking because you have to
manually stage each git commit...but I think this is referring to running git merge
and it automatically merging the files, but the con of this being that if there are
differences/conflicts between the same file on different branches you having to
having to manually go in and modify. Not exactly sure though. 
